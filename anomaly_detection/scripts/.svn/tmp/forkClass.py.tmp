#!/usr/bin/env python

import sys

import rospy
#from remote_counter import countingSrv.srv
from remote_counter.srv import countingSrv
from remote_counter.srv import countingSrv


class forkClass():
	def __init__(self,count,num_forks_):
		print "forkClass"
		
		
	def countingSrv_client(self,count):
		rospy.wait_for_service('/counter/forkcnt')
		try:
<<<<<<< .mine
			countingSrv = rospy.ServiceProxy('/counter/forkcnt', countingSrv)
			resp1 = countingSrv(count)
=======
			countingService = rospy.ServiceProxy("/counter/forkcnt", countingSrv)
			resp1 = countingService(count)
>>>>>>> .r98
			print resp1
			return resp1
		except rospy.ServiceException, e:
			print "Service call failed: %s"%e
	
	def forkCounter(self,count):
		if self.countingSrv_client(count)==True:
			return True
		else:
			rospy.sleep(.05)
			return False
			
	def getForks(self,num_forks_):
		return forkCounter(-num_forks_)
		
	def giveForks(self,num_forks_):
		while not rospy.is_shutdown():
			if (forkCounter(num_forks_)):
				break
			
		
if __name__ == '__main__':
	count=sys.argv[1] 
	num_forks_=sys.argv[2]
	x=forkClass(count,num_forks_)
	#x.countingSrv_client(count)
	x.forkCounter(count)
